class Solution(object):
    def palindromePairs(self, words):
        """
        :type words: List[str]
        :rtype: List[List[int]]
        """
        res = []
        if len(words) == 1:
            return []
            
        def checkPalindrome(wordPair):
            return True if wordPair == wordPair[::-1] else False
        
        for i in range(len(words)):
            for j in range(len(words)):
                if i != j:
                    wordPair = words[i] + words[j]
                    if checkPalindrome(wordPair):
                        res.append([i, j])
                        
        return res
            
class Solution(object):
    def palindromePairs(self, words):
        """
        :type words: List[str]
        :rtype: List[List[int]]
        """
        wordict = {}
        res = [] 
        for i in range(len(words)):
            wordict[words[i]] = i
        print wordict
        for i in range(len(words)):
            for j in range(len(words[i])+1):
                tmp1 = words[i][:j]
                tmp2 = words[i][j:]
                print tmp1,1
                print tmp2, 2
                
                if tmp1[::-1] in wordict and wordict[tmp1[::-1]]!=i and tmp2 == tmp2[::-1]:
                    res.append([i,wordict[tmp1[::-1]]])
                if j!=0 and tmp2[::-1] in wordict and wordict[tmp2[::-1]]!=i and tmp1 == tmp1[::-1]:
                    res.append([wordict[tmp2[::-1]],i])

        return res
            
            
            